package main

import "fmt"

/*
时间复杂度和空间复杂度的计算方法如下：

时间复杂度：通常采用大O符号表示法，即T ( n ) = O ( f ( n ) )，其中f ( n )表示每行代码执行次数之和。
空间复杂度：主要针对的是变量，通常用空间复杂度来描述。比如，int i = 1的空间复杂度为O(1)，
int[] a = new int[n]的空间复杂度为O(n)，int[] a = new int[n][n]的空间复杂度为O(n^2)。


*/
// T(n) = O(f(n))时间复杂度
// 其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是：算法的渐进时间复杂度。
// ****时间复杂度 并不是计算代码运行所花的时间 ，因为这个收机器性能影响， 时间复杂度实际是来累计代码执行次数的
// 大写的 O 它是用来表示代码执行时间的增长变化趋势的。
// 如果代码都是单行代码 没有循环和递归调用那时间复杂度都是O(1)
// 常数阶O(1)
// 对数阶O(logN)
// 线性阶O(n)
// 线性对数阶O(nlogN)
// 平方阶O(n²)
// 立方阶O(n³)
// K次方阶O(n^k)
// 指数阶(2^n)

// O(n) 空间复杂度
func main() {
	for i := 0; i < 100; i++ {
		fmt.Print("-", i)
		j := i
		j++
	}
	//T(n) = O(2n+1)
	t := 1
	// go 语言没有 while 循环都用for
	for t < 100 {
		t = t * 2
	}
	// 2的 x 次方 = 100
	// T(n) = O(log(2)100)

	s := 1
	j := 2
	s++
	j++
	m := s + j
	fmt.Println(m)
	// O(1)

	n := [100]int{} //默认零值 分配100个空间
	for i := 1; i <= len(n); i++ {
		j = i //
		j++
	}
	// O(100)

}

// 空间复杂度 实际也不是计算真实消耗的空间的。
// 空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，
// 同样反映的是一个趋势，我们用 S(n) 来定义。
